{"name":"Sake","body":"# CS Make - Sake\r\n\r\nWelcome to Sake, a C# language enabled make system.\r\n\r\n## Getting Sake from source and building\r\n\r\nThis also a way you can see Sake in action - it downloads itself from the Nuget gallery to build.\r\n\r\n    git clone https://github.com/loudej/sake.git && cd sake && build\r\n\r\nOr to build on Mac or Linux\r\n\r\n    git clone https://github.com/loudej/sake.git && cd sake && ./build\r\n\r\n\r\n## Getting Sake on your machine\r\n### Via Chocolatey\r\n\r\nThis is a convenient if you want to run `sake` in any directory from a command line.\r\n\r\n    cinst sake -pre\r\n\r\nFirst, you'll need to get chocolatey if you don't already have it. From a Package Manager Console\r\n\r\n    Install-Package chocolatey\r\n    Initialize-Chocolatey\r\n    Uninstall-Package chocolatey\r\n\r\nOr there are other ways of getting chocolatey, see https://github.com/chocolatey/chocolatey/wiki/Installation\r\n\r\n\r\n## Getting Sake in your project's build\r\n### Via build.cmd bootstrapper\r\n\r\nThis is another nice technique if you want to use Sake in your project and don't to need people to install anything machine-wide. What you do is use Nuget.exe to download SAKE from the gallery in a pre-build step. This takes three files, `package.config`, `build.cmd`, and `makefile.shade`.\r\n\r\n#### package.config\r\n    <packages>\r\n      <package id=\"Sake\" version=\"0.1.0-alpha\" />\r\n      <!-- add other packages used as build tools, like nunit or xunit-runner -->\r\n    </packages>\r\n\r\n#### build.cmd\r\n    @echo off\r\n    \".nuget\\NuGet.exe\" install -OutputDirectory packages .\\packages.config\r\n    \"packages\\Sake.0.1.0-alpha\\tools\\sake.exe\" %*\r\n\r\n#### makefile.shade\r\n    #default\r\n      log info=\"Hello world!\"\r\n\r\n","tagline":"The make system powered by C#","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}